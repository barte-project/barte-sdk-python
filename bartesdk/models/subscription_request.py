# coding: utf-8

"""
    Barte Api

    Documentação para integração com a API da Barte <h3>Segurança</h3> Utilizamos um token de autorização cadastrado dentro da plataforma da Barte no menu  <b>Configurações -> Integração -> Chaves API</b> para autenticar as operações executadas.</br> Adicione o token a requisição utilizando o header <b>X-Token-Api</b>, na documentação utilize  o botão <b>Authorize</b> para os testes. <h3>Ambientes</h3> Disponibilizamos dois ambientes <b>(sandbox e produção)</b>. Utilize o primeiro para seus  testes de desenvolvimento.</br> Você pode selecionar o ambiente que quer utilizar na nossa documentação através com combo  <b>servers</b></br> <b>Observação: </b> Entre contato com nossa equipe de operações para lhe auxiliar na criação  de uma conta em nosso ambiente de sandbox.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from bartesdk.models.additional_value_request import AdditionalValueRequest
from bartesdk.models.basic_value_request import BasicValueRequest
from bartesdk.models.payment_request import PaymentRequest
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionRequest(BaseModel):
    """
    SubscriptionRequest
    """ # noqa: E501
    uuid_plan: Annotated[str, Field(strict=True)] = Field(alias="uuidPlan")
    basic_value: BasicValueRequest = Field(alias="basicValue")
    additional_value: Optional[AdditionalValueRequest] = Field(default=None, alias="additionalValue")
    payment: PaymentRequest
    uuid_buyer: Annotated[str, Field(strict=True)] = Field(alias="uuidBuyer")
    start_date: date = Field(alias="startDate")
    __properties: ClassVar[List[str]] = ["uuidPlan", "basicValue", "additionalValue", "payment", "uuidBuyer", "startDate"]

    @field_validator('uuid_plan')
    def uuid_plan_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$", value):
            raise ValueError(r"must validate the regular expression /^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/")
        return value

    @field_validator('uuid_buyer')
    def uuid_buyer_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$", value):
            raise ValueError(r"must validate the regular expression /^\w{8}-\w{4}-\w{4}-\w{4}-\w{12}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_value
        if self.basic_value:
            _dict['basicValue'] = self.basic_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_value
        if self.additional_value:
            _dict['additionalValue'] = self.additional_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuidPlan": obj.get("uuidPlan"),
            "basicValue": BasicValueRequest.from_dict(obj["basicValue"]) if obj.get("basicValue") is not None else None,
            "additionalValue": AdditionalValueRequest.from_dict(obj["additionalValue"]) if obj.get("additionalValue") is not None else None,
            "payment": PaymentRequest.from_dict(obj["payment"]) if obj.get("payment") is not None else None,
            "uuidBuyer": obj.get("uuidBuyer"),
            "startDate": obj.get("startDate")
        })
        return _obj


