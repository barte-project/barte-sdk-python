# coding: utf-8

"""
    Barte Api

    Documentação para integração com a API da Barte <h3>Segurança</h3> Utilizamos um token de autorização cadastrado dentro da plataforma da Barte no menu  <b>Configurações -> Integração -> Chaves API</b> para autenticar as operações executadas.</br> Adicione o token a requisição utilizando o header <b>X-Token-Api</b>, na documentação utilize  o botão <b>Authorize</b> para os testes. <h3>Ambientes</h3> Disponibilizamos dois ambientes <b>(sandbox e produção)</b>. Utilize o primeiro para seus  testes de desenvolvimento.</br> Você pode selecionar o ambiente que quer utilizar na nossa documentação através com combo  <b>servers</b></br> <b>Observação: </b> Entre contato com nossa equipe de operações para lhe auxiliar na criação  de uma conta em nosso ambiente de sandbox.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bartesdk.models.payment_request import PaymentRequest

class TestPaymentRequest(unittest.TestCase):
    """PaymentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentRequest:
        """Test PaymentRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentRequest`
        """
        model = PaymentRequest()
        if include_optional:
            return PaymentRequest(
                method = 'CREDIT_CARD',
                card = bartesdk.models.card_request.CardRequest(
                    holder_name = 'Nome do cartão', 
                    number = '4380127356178163', 
                    expiration = '01/2025', 
                    cvv = '333', ),
                fraud_data = bartesdk.models.fraud_data_request.FraudDataRequest(
                    document = '14105439000193', 
                    name = 'Nome do comprador', 
                    email = 'comprador@email.com', 
                    phone = '18999999999', 
                    billing_address = bartesdk.models.billing_address_request.BillingAddressRequest(
                        country = 'Brasil', 
                        state = 'São Paulo', 
                        city = 'São Paulo', 
                        district = 'Bela Vista', 
                        street = 'Av. Paulista', 
                        zip_code = '01311-300', 
                        number = '2537', 
                        complement = '9 andar', ), ),
                brand = ''
            )
        else:
            return PaymentRequest(
                method = 'CREDIT_CARD',
        )
        """

    def testPaymentRequest(self):
        """Test PaymentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
